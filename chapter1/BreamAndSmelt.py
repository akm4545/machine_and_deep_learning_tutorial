# 도미의 길이와 무게
# 각 도미의 길이와 무게로 표현한 이러한 특징을 특성(feature)라고 부른다
bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

# 빙어 데이터
smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

# 특성을 그래프로 표현하면 데이터를 잘 이해할 수 있고 앞으로의 작업에 대한 힌트를 얻을 수도 있다
# 길이를 X 축으로 하고 무게를 Y 축으로 한 뒤 각 도미를 이 그래프에 점으로 표시한다
# 이런 그래프를 산점도 (scatter plot) 라고 부른다
# 산점도
# x, y 축으로 이뤄진 좌표계에 두 변수(x, y)의 관계를 표현하는 방법

# 파이썬에서 과학계산용 그래프를 그리는 대표적인 패키지는 맷플롯립(matplotlib)이다 
# 이 패키지를 임포트 하여 산점도를 그리는 scatter() 함수를 이용하여 그린다

import matplotlib.pyplot as plt #matplotlib의 pyplot 함수를 plt로 줄여서 사용

plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.xlabel('length') # X 축은 길이
plt.ylabel('weight') # y 축은 무게
plt.show()

# 이 그래프는 2개의 특성을 사용해 그린 그래프이기 때문에 2차원 그래프라고 말한다
# 생선의 길이가 길수록 무게가 많이 나간다고 생각하면 이 그래프 모습은 매우 자연스럽다
# 이렇게 산점도 그래프가 일직선에 가까운 형태로 나타나는 경우를 선형(linear)적이라고 말한다

# 빙어의 데이터도 길이와 무게가 비례하지만 늘어나는 정도가 미미하다

length = bream_length + smelt_length
weight = bream_weight + smelt_weight

# 사이킷런 머신러닝 패키지를 사용하려면 각 특성의 리스트를 세로 방향으로 늘어뜨린 2차원 리스트를 만들어야 한다
# 파이썬의 zip() 리스트 내포 구문을 사용하여 2차원 리스트로 만든다

# length와 weight를 zip으로 하나씩 꺼낸 뒤 for in 구문으로 반복하며 요소 하나 하나를 l, w에 할당
# 그 후 [l, w] 배열에 넣고 바깥 배열에 저장
fish_data = [[l, w] for l, w in zip(length, weight)]

print(fish_data)

# 생선의 길이와 무게가 합쳐진 리스트가 나온다

# 그 이후 정답 데이터를 만들어야 한다
# 머신러닝 알고리즘이 도미와 빙어를 구분하려면 어떤 생선이 도미와 빙어인지 알려주어야 한다

# 도미와 빙어를 숫자 1과 0으로 표현
# 도미 = 1, 빙어 = 0

# 앞쪽에 도미 35마리 그 뒤쪽에 빙어 14마리 데이터를 넣었으므로 
# 1 데이터 35개를 넣고 0 데이터 14개를 넣어 배열을 만든다
fish_target = [1] * 35 + [0] * 14
print(fish_target)

# 머신러닝에서 2개를 구분하는 경우 찾으려는 대상을 1로 놓고 그 외에는 0으로 놓는다

# 사이킷런 패키지에서 k-최근접 이웃 알고리즘을 구현한 클래스인 KNeighborsClassifier를 임포트
# 모듈 전체가 아니라 특정 클래스만 임포트 하려면 fomr ~ import 구문 사용
from sklearn.neighbors import KNeighborsClassifier

# 임포트한 클래스의 객체 생성
kn = KNeighborsClassifier()

# 이 객체에 fish_data와 fish_target을 전달하여 도미를 찾기 위한 기준을 학습시킨다
# 이런 과정을 머신러닝에서는 훈련이라고 부른다
# 사이킷런에서는 fit()메서드가 이런 역할을 한다

kn.fit(fish_data, fish_target)

# fit() 메서드는 주어진 데이터로 알고리즘을 훈련한다
# 잘 훈련되었는지 평가하려면 score() 메서드를 사용한다 
# 이 메서드는 0에서 1 사이의 값을 반환하며 1은 모든 데이터를 정확히 맞춤, 0.5는 절반만 맞췄다는 의미다

# 머신러닝 알고리즘을 구현한 프로그램이나 알고리즘을 (수식 등으로) 구체화하여 표현한 것을 모데일라 부른다
# ex) 스팸 메일을 걸러내기 위해 k-최근접 이웃 모델을 사용해 봅시다

kn.score(fish_data, fish_target)


